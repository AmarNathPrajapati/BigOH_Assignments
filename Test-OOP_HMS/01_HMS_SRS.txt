Test-OOPs
Hotel Management system
Problem Statement :
Application for Hotel reservation. We will take the selection criteria from user and display the hotels list for user basing on the criteria. User can book the room if there is availability of the rooms in that particular hotel. There are three different types of user roles for the application they are administrator , hotel agent and normal user. Following are the actions provided for each user.


Normal user :
Can register for the site
Search the hotel details basing on the criteria.
Book the hotel room
Can modify the self details.


Hotel Agent:
Can register for the site
Can add/update the details of the hotel.


Adminstrator:
Will approve the new hotel details added to the application
Can delete the user/hotel details.

Minimal Features :
Adding Hotel information such as hotel name, location, number of rooms , facilities etc. to the database

Listing the hotels based on different criteria selected by the user.

User able to select a hotel and book a room.

Booking permitted only if there are rooms available

Displaying the reservation status.

Registration of users.

Update user details.

Modify hotel details.

Approval of the details entered by the hotel agent.

Delete user/hotel details by admin

Additional Features:
Taking Feedback from user.

Rating the hotels based on the feedback.

Goals:
To complete the hotel booking flow, registration of the users, adding details of the hotels.

Deliverables:
Minimal Features and additional features provided if time permits.
Out of scope:
We are not embedding payment gateway in the current application we will try if time permits after completion of additional features.




HotelManagementSystem
-- User.h / User.cpp
-- Hotel.h / Hotel.cpp
-- Room.h / Room.cpp
-- Booking.h / Booking.cpp
-- Feedback.h / Feedback.cpp
-- Payment.h/ Payment.cpp
-- UserService.h / UserService.cpp
-- HotelService.h / HotelService.cpp
-- RoomService.h / RoomService.cpp
-- BookingService.h / BookingService.cpp
-- FeedbackService.h / FeedbackService.cpp
-- AdminService.h / AdminService.cpp
-- HotelManagement.h / HotelManagement.cpp
-- main.cpp 


1 Data Classes:

    User (Represents system users - Admin, Agent, Normal User)
        Attributes:
        userID (int) - Unique identifier for the user.
        name (string) - User's full name.
        email (string) - User's email (unique).
        password (string) - Encrypted password.
        role (enum) - User type: Admin / Agent / Normal.
        bookings (vector<int>) - List of booking IDs associated with this user. ------------------>Done


    Hotel (Represents a hotel)
        Attributes:
        hotelID (int) - Unique identifier for the hotel.
        name (string) - Hotel name.
        location (string) - City or address.
        rooms (vector<int>) - List of room IDs available in the hotel.
        facilities (vector<string>) - List of facilities (WiFi, Pool, Gym, etc.).
        rating (float) - Average rating of the hotel.
        approvedByAdmin (bool) - Whether the admin has approved the hotel.-------------------------->Done


    Room (Represents an individual room in a hotel)
        Attributes:
        roomID (int) - Unique identifier for the room.
        hotelID (int) - Reference to the hotel.
        roomType (enum) - Single / Double / Suite.
        pricePerNight (double) - Price of the room per night.
        availability (bool) - True if available, false otherwise.----------------------------------->Done


    Booking (Stores booking details)
        Attributes:
        bookingID (int) - Unique identifier.
        userID (int) - User who made the booking.
        hotelID (int) - Hotel where the room is booked.
        roomID (int) - Room booked.
        checkInDate (date) - Check-in date.
        checkOutDate (date) - Check-out date.
        status (enum) - Pending / Confirmed / Cancelled.---------------------------------------------->Done

    Feedback (Stores user reviews & ratings)
        Attributes:
        feedbackID (int) - Unique identifier.
        userID (int) - User who gave the feedback.
        hotelID (int) - Hotel being reviewed.
        rating (int) - Rating (1-5 stars).
        comment (string) - User's feedback message.---------------------------------------------------->Done


    Payment
        Attributes:
        paymentID, userID, bookingID, amount, status---------------------------------------------------->Done


2. HotelManagementDB Class
    Responsibilities (As a Database Server)
        vector<User> users; (all registered users)
        vector<Hotel> hotels; (all hotels, approved/unapproved both)
        vector<Room> rooms; (all rooms)
        vector<Booking> bookings; (all bookings)
        vector<Feedback> feedbacks; (all feedback)
        vector<Payment> payments; (all payments details)----------------------------------------->Done


3. Service Classes
    UserService (Handles user-related operations)
    Methods:
        registerUser(name, email, password, role) -> User
        isAuthenticated(userID)
        isAdmin(int userID)
        isAgent(int userID)
        updateProfile(userID, newDetails) -> bool
        deleteUser(userID) -> bool (User and Agent can delete Own Profile and Admin can also delete any user and agent profile)
        Search the approve hotel details basing on the criteria. ---------------------------------------------------->Done

 
    HotelService (Manages hotels)
    Methods:
        addHotel(name, location, facilities) -> Hotel (Only can be done Admin and Agent)
        updateHotel(hotelID, updatedDetails) -> bool  (Only can be done Admin and Agent)
        getHotels(criteria) -> vector<Hotel> -> (if agent and admin show all hotels and for normal user show only approved hotels)
        getHotelDetails(hotelID) -> Hotel (if unapproved show agent and admin and for normal user show only approved hotels)----->Done


    RoomService (Manages room availability & pricing)
    Methods:
        addRoom(hotelID, roomType, price) -> Room (Only can be done Admin and Agent)
        updateRoom(roomID, updatedDetails) -> bool(Only can be done Admin and Agent)
        getAvailableRooms(hotelID) -> vector<Room (for all)
        updateAvailability(roomID, status) -> bool (Only can be done Admin and Agent)------------------------------------->Done


    BookingService (Handles room booking & cancellations)
    Methods: (for all... Admin and Agent can book on the behalf of User)
        createBooking(userID, hotelID, roomID, checkIn, checkOut) -> Booking
        cancelBooking(bookingID) -> bool
        getUserBookings(userID) -> vector<Booking>
        getBookingDetails(bookingID) -> Booking--------------------------------------------->Done


    FeedbackService (Manages feedback & ratings)
    Methods:(For all)
        addFeedback(userID, hotelID, rating, comment) -> bool
        getFeedback(hotelID) -> vector<Feedback>
        getUserFeedback(userID) -> vector<Feedback>


    AdminService (Handles admin-specific tasks)
    Methods:
        approveHotel(hotelID) -> bool
        deleteUser(userID) -> bool
        deleteHotel(hotelID) -> bool
        canRegisterAnyUser(userID) -> bool


    PaymentService (Minimal payment handling)
        processPayment(userID, bookingID, amount) -> Payment
        refundPayment(paymentID) -> bool (Only Admin can refund)
        getPaymentDetails(paymentID) -> Payment

    HotelManagementWeb Class (without register user can see hotels)
        displayApprovedHotels() -> vector<Hotel>

3. Main

bhai, mai chahata hoon ki sari data classes data folder me ho... service classes services classes me ho... database class db folder me ho... aur main sabase bahar ho...usake liye kya changes karane honge....