A Library Management System is a software built to handle the primary housekeeping functions of a library. Libraries rely on library management systems to manage asset collections as well as relationships with their members. Library management systems help libraries keep track of the books and their checkouts, as well as members’ subscriptions and profiles.
Library management systems also involve maintaining the database for entering new books and recording books that have been borrowed with their respective due dates.
System Requirements
Always clarify requirements at the beginning of the interview. Be sure to ask questions to find the exact scope of the system that the interviewer has in mind.
We will focus on the following set of requirements while designing the Library Management System:

Any library member should be able to search books by their title, author, subject category as well by the publication date.

Each book will have a unique identification number and other details including a rack number which will help to physically locate the book.

There could be more than one copy of a book, and library members should be able to check-out and reserve any copy. We will call each copy of a book, a book item.
The system should be able to retrieve information like who took a particular book or what are the books checked-out by a specific library member.
There should be a maximum limit (5) on how many books a member can check-out.
There should be a maximum limit (10) on how many days a member can keep a book.
The system should be able to collect fines for books returned after the due date.
Members should be able to reserve books that are not currently available.
The system should be able to send notifications whenever the reserved books become available, as well as when the book is not returned within the due date.
Each book and member card will have a unique barcode. The system will be able to read barcodes from books and members’ library cards.
Use case diagram
We have three main actors in our system:
Librarian: Mainly responsible for adding and modifying books, book items, and users. The Librarian can also issue, reserve, and return book items.
Member: All members can search the catalog, as well as check-out, reserve, renew, and return a book.
System: Mainly responsible for sending notifications for overdue books, canceled reservations, etc.
Here are the top use cases of the Library Management System:
Add/Remove/Edit book: To add, remove or modify a book or book item.
Search catalog: To search books by title, author, subject or publication date.
Register new account/cancel membership: To add a new member or cancel the membership of an existing member.
Check-out book: To borrow a book from the library.
Reserve book: To reserve a book which is not currently available.
Renew a book: To reborrow an already checked-out book.
Return a book: To return a book to the library which was issued to a member.

step1:
1. what are the enities
2. What are the attributes and method of entity.
3. How they are communicate.
4. How and what data flows between entities
5. How we authenticate user.

bhai, ye task hai... esame ye batana ki kya kya entities possible hai... un enities ke kya kya attributes and method possible hai...aur ye entities aapas me kaise communicate karenge (means relationship between them)... entites me bich kaun sa data transfer hoga aur kaise hoga... aur ham user ko kaise authenticate kar sakate hai... es task ka data flow diagram level 1 bhi samajhana



bhai, discussion ke baad... final decistion ye liya gaya... sare method related Book, BookItem, Member,Constraints, Librarian, Notification, Trnasaction, fine, Reservation, BarcodeScanner, authentication LibrarySystem class ke under aayenge...aur Book, BookItem, Member, Librarian, Notification, Trnasaction, fine, Reservation, BarcodeScanner as a data class banenge aur LibrarySystem class ke method ko use karenge for communication...toh bhai, ab ye batao ki final attributes and method kya hoge for each enity...



bhai, ye modification karake... classes ka structure finalize karate hai...
2.6 Authentication 
Authentication must have two function (register and validate)
Authentication me hame sabase pahale librarian ko register karana hai...
fir ye ensure karana hai ki keval registered librarian ya member hee library System ki functionality use kar sake...
Member ka registration (member management) keval librarian hee kar sakata hai...
library System ke baaki functionality like serach book, chekout book etc.... vo hee access kar sakata hai... jo registered ho
There should be a maximum limit (5) on how many books a member can check-out.
There should be a maximum limit (10) on how many days a member can keep a book.
login(userId: int, password: str) -> bool---> (No Need)
logout(userId: int) -> (No Need)
resetPassword(userId: int, newPassword: str) -> None (No Need)




bhai, kuch aur modification karake.... final structure finalize karate hai...
Mai chahata hoon ki ek bade se librarySystem banane se better hoga ki ham librarySystem ko divide kar de...
Authentication
Book Management
Member Management
Book Borrowing & Returning
Reservation & Notification
Fine Management
Barcode Scanning

ek chhota change ye chahata hoon ki....
Authentication
    void registerLibrarian(Librarian librarian);
    bool registerMember(int librarianId, Member member);
    bool validateUser(int userId);

    librarian member ko register aur unregister kar sake on the basis of membership

baaki Sab same rakhana bhai... 
abhi text formate me answer do... jab tak design ka discussion chal raha hai...




bhai, kya ham saari services ko librarySystem se bind kar sakate hai...
mai ye chahata hoon... ki service class me ham kisi tarah ka data use na kare keval services provide kare...
and all data related to main librarySystem...


ab bhai, sare data classes, services classes and main library system finalize karo....
make sure data classes me keval data related info honge.. services classes me keval services (methods)...aur sari data and service library system se connent hongi...



bhai, ab requirement and design Analysis phase complete ho gaya hai.... ab implementation phase start karate hai...
implement these requirement using cpp
follow Modular desing: separate file for classes Book, BookItem, Member,  and main.cpp
apply solid principle: at least each class must have single responsibity principle
saare files ka code different section me dena directly in chat with little exaplanation...
give me complete code for all files... all methods must be implemented...

