Topic To Cover
1. Advanced JavaScript Concepts:
    Destructuring assignment for arrays and objects
    Spread/Rest operator and its applications
    Introduction to ES6 features: let, const, and arrow functions
    Template literals and their advantages

2. Asynchronous JavaScript:
    Callback functions and their role in asynchronous programming
    Introduction to Promises
    async/await syntax for handling asynchronous code
    Basic error handling with try...catch

3.JSON (JavaScript Object Notation):
    What is JSON?
    Parsing JSON
    Stringifying JSON   
    JSON Manipulation (Accessing and Modifying JSON Data)
    Nested JSON Manipulation
    Handling Arrays in JSON
    Practice exercises on JSON Manipulation

************************************************ Detailed Exaplanation *****************************************************

1. Advanced JavaScript Concepts

    a. Destructuring Assignment (Arrays & Objects)
        Destructuring Assignment ek feature hai jo hume arrays aur objects se values extract karne aur unko variables me assign karne ki facility deta hai.
        Bina extra code likhe, directly variables ko assign karna.
        Benefits:
            Code short aur clean ho gaya
            Readability badh gayi

        i. Array Destructuring
            Agar koi value missing ho toh default value assign kar sakte hain
            Agar koi value nahi chahiye toh comma laga ke skip kar sakte hain:
            

        ii.Object Destructuring
            Note: key name same hona chahiye, jaisa object me ho.
            Renaming Variables: Agar variable ka naam change karna ho.

    b. Spread & Rest Operator (...)
        i. Spread Operator (...)
            Spread Operator ek iterable (Array/Object) ko expand (spread) karne ke liye use hota hai.

            Arrays me Spread Operator
                use case: Bina loop likhe arrays merge kar sakate hai.
            Objects me Spread Operator
                use case: Bina Object.assign() likhe objects merge kar sakate hai.

        ii.Rest Operator (...)
            Rest Operator multiple values ko ek array me pack karne ke liye use hota hai.
            Function me Rest Operator:
                Bina arguments object ka use kiye values ko ek array me store kiya

    c. ES6 Features: let, const, Arrow Functions
        i. let vs const vs var
        Feature	                var	                let	            const
        Hoisted	                Yes (undefined)	    Yes (TDZ)	    Yes (TDZ)
        Re-declare Allowed?	    Yes	                No	            No
        Re-assign Allowed?	    Yes	                Yes	            No
        Scope	                Function Scope	    Block Scope	    Block Scope
        Note: Always use const by default, unless you need to reassign.

        ii. Arrow Functions (=>)
            Arrow Functions compact aur readable functions likhne ka tarika hai.
            Single line function aur return keyword bhi nahi likhna pada

    d. Template Literals (``)
        Easier, cleaner & better way to concat string.
        Multiline Strings (Without \n)

2. Asynchronous JavaScript
    callback, promises, async/await
    ye asynchronous code ko ek tarike se manage karne ka structure dete hain, taaki vo "sequentially" likha ja sake, bina "blocking" ki problem ke.

    a. Callback functions and their role in asynchronous programming
        i. Callback Function
            Ek function jo dusre function ko argument ke roop me pass kiya jata hai aur bad me call hota hai, usko callback function kehte hain. 
            Yeh concept asynchronous programming me bahut important role play karta hai.

        ii.Synchronous vs Asynchronous Code
            Synchronous Code: Line by line execute hota hai, agla statement tab tak execute nahi hota jab tak pehla complete na ho.
            Asynchronous Code: Code ek sath execute hota hai bina dusre code ko block kiye.

        iii.Callback Hell (Pyramid of Doom)
            Jab multiple nested callbacks hote hain, toh callback hell hota hai, jisme code complex aur unreadable ho jata hai.

    b. Introduction to Promises
        Promises ek powerful concept hai jo asynchronous operations ko efficiently handle karne me madad karta hai. 
        Promise ek object hota hai jo asynchronous operation ka result represent karta hai.
        Yeh resolve (success) ya reject (failure) ho sakta hai.

        Promise Ke 3 States
        1. Pending: Jab tak asynchronous operation complete nahi hota.
        2. Fulfilled (Resolved): Jab operation successfully complete ho jaye.
        3. Rejected: Jab operation fail ho jaye ya koi error aaye.

        Imp Note:
            Yahan resolve() call hone par .then() chalega
            Agar reject() call hota hai to .catch() execute hoga
            finally() hamesha chalega chahe promise resolve ho ya reject ho

        Important keywords in Promise
        i. new Promise() - Creating a Promise
            Ek Promise create karne ke liye new Promise() constructor ka use hota hai.
            Isme 2 parameters hote hain:
                resolve(value): Jab task complete ho jaye to success value return karta hai.
                reject(error): Jab task fail ho jaye to error return karta hai.

        ii. .then(successCallback) - Handle Success
            then() ka use jab promise resolve ho jaye tab hota hai.

            resolve() aur .then() ka Relation

                then() me jo bhi pass karoge, vo resolve() se replace hoga.
                execution flow:
                resolve() Pehle Chalta Hai, Fir .then() Execute Hota Hai!
                resolve(value) Promise ko fulfill karta hai.
                then(callback) sirf tabhi execute hota hai jab Promise resolve() hota hai.

                Jab .then() me ek function pass karte ho, toh uska execution resolve() ke output pe depend karega.
                Agar function return karega, toh next .then() usi returned value ko process karega.
                resolve(value) pehle execute hota hai, fir .then(callback) uska value process karta hai.
                Agar .then() kuch return karega, to next .then() usi value ko process karega.
                Har .then() jo return karega, vo next .then() me jayega. ðŸš€
                pahale resolve call hoga.... agar resolve ke andar kuch hai... toh vo .then() ke callback me pass ho jayega...


        iii. .catch(errorCallback) - Handle Error
            catch() ka use jab promise reject ho jaye tab hota hai.

        iv. .finally() - Always Execute
            finally() hamesha execute hota hai, chahe promise resolve ho ya reject ho.

        v. Promise Chaining - Multiple Async Tasks
            Kabhi kabhi hume multiple asynchronous tasks execute karne hote hain, jo ek ke baad ek complete hote hain.

        vi. Promise.all() - Multiple Promises Parallel Execution
            Jab hume multiple asynchronous tasks ko ek saath execute karna ho aur sab ka result ek sath chaiye, tab Promise.all() ka use hota hai.
            Sabhi promises parallel me execute honge, aur sab complete hone ke baad hi .then() chalega!

        vii.Promise.race() - Fastest Promise Ko Return Karo
            Jab multiple promises execute ho rahe ho, aur jo sabse pehle complete ho uska result chaiye, tab Promise.race() ka use hota hai.
            Jo promise sabse pehle complete hota hai, uska result return hota hai!
        
        viii. Promise.any() - First Fulfilled Promise
            Promise.any() jo sabse pehla successfully resolve ho use return karta hai.

    c. async/await syntax for handling asynchronous code
        Async/Await ek modern way hai asynchronous code likhne ka 
        jo promises ka use karta hai, but zyada readable aur clean hota hai.

        i. Error Handling in Async/Await
            Try-Catch ka use kar ke errors ko handle kar sakte hain.
            Try-Catch asynchronous code me errors handle karne ka best way hai.     

    d. Basic Error Handling with Try...Catch...finally
        Try block me jo bhi code likha hota hai, agar koi error aata hai to Catch block me chala jata hai.
        Direct try-catch me asynchronous error handle nahi hota
        Sahi Tarika: Async/Await ke saath Try-Catch ka use karo
        Note: 
            Agar finally block likhte ho, toh vo hamesha chalega!
            finally block ensure karega ki resources cleanup ho jaye, chahe error aaye ya na aaye
            finally ka use kab kare?
                Cleanup operations (Jaise database connection close karna ya file handling)
                Resources ko release karne ke liye

3.JSON (JavaScript Object Notation)
    JSON ek structured data format hai jo key-value pairs me store hota hai, 
    jisme keys strings hoti hain aur values different data types ho sakti hain.
    Yeh JavaScript objects se milta-julta dikhta hai, lekin strict rules follow karta hai:
        Double quotes ("") ka use hota hai
        Trailing commas allowed nahi hote
        Functions ya undefined allowed nahi hote

    i. Parsing JSON (Convert JSON string â†’ JavaScript Object)
        Jab JSON server se aata hai, toh vo string format me hota hai.
        hume use JavaScript object me convert karna padta hai.
        JSON.parse() - Convert JSON string to JavaScript Object

    ii.Stringifying JSON (Convert JavaScript Object â†’ JSON String)
        Jab hume JavaScript object ko JSON string me convert karna hota hai, toh JSON.stringify() ka use karte hain.

    iii.JSON Manipulation (Accessing and Modifying JSON Data)
        JSON ko JavaScript object me convert karne ke baad, hum dot notation (obj.key) ya bracket notation (obj["key"]) se uska data access & modify kar sakte hain.


Note: 
1. The Arguments Object
    arguments object ek special object hai jo function ke andar automatically available hota hai. 
    Ye function ke andar pass ki gayi sari values ko ek object ke form me store karta hai.

    arguments ek object hai jisme har argument ek index se store hota hai.
    Bilkul array ki tarah index se access kar sakte hain!

    arguments ek object hai, array nahi!
    Agar array methods (map, forEach, filter) use karni ho toh isko array me convert karna padega.

    Arrow functions me arguments object nahi hota!
    Agar arguments ka kaam arrow function me karna ho toh Rest Parameter (...) use karna padega.
    Key Points About arguments Object:
        Function ke andar hi accessible hota hai
        Har function me automatically create hota hai
        Array-like hota hai but actual array nahi hota
        ES6 ke Arrow Functions me available nahi hota

    Important Notes
        Arrow functions me arguments object nahi hota.
        ES6 ke baad Rest Parameter (...) arguments ka better alternative hai.
        Rest Parameter (...args) arguments se better hai kyunki ye real array return karta hai.

2. JavaScript Me Function Banane Ke Tarike
    a. Function Declaration
        Hoisting: Function declarations puri tarah hoist ho jati hain, matlab aap function ko uske define hone se pehle bhi call kar sakte ho.
    
    b. Function Expression
        Yeh ek anonymous function ko ek variable me assign karta hai.
        Hoisting: Variable hoist hota hai, lekin function expression TDZ me hota hai (agar let ya const use kiya ho) isliye aapko pahle function assign karna zaroori hai.

    c. Arrow Function Expression (ES6)
        Concise syntax aur implicit return (agar body me braces nahi use kiye ho).
        Arrow functions ka apna this nahi hota; ye lexical this lete hain.
        Hoisting: Arrow functions jo function expressions ki tarah treat hote hain, to pehle assign karna padta hai.

    d. Function Constructor
        Ye method rarely use hota hai kyunki yeh dynamic code evaluation ki tarah kaam karta hai aur security issues bhi ho sakte hain.
        Generally, function declaration ya expression hi use karna best practice hai.



// destructured and spread of Undefined as array and object 
let a = undefined
let obj = {
    ...a
}
console.log(obj)
