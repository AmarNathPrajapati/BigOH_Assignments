Create a whats app as following
Users have contacts and can chat with any contact
Messaging in text audio and video
Users can see the status of all the contacts
Users can post status
Status can be text and image

step1:
1. what are the enities
2. What are the attributes and method of entity.
3. How they are communicate.
4. How and what data flows between entities
5. How we authenticate user.

bhai, ye task hai... esame ye batana ki kya kya entities possible hai... un enities ke kya kya attributes and method possible hai...aur ye entities aapas me kaise communicate karenge (means relationship between them)... entites me bich kaun sa data transfer hoga aur kaise hoga... aur ham user ko kaise authenticate kar sakate hai... es task ka data flow diagram level 1 bhi samajhana

bhai, discussion ke baad... final decistion ye liya gaya... sare method related user, contact, message, status, authentication whatsApp class ke under aayenge...aur user, contact, message, status as a data class banenge aur whatsApp class ke method ko use karenge for communication...toh bhai, ab ye batao ki final attributes and method kya hoge for each enity...



bhai, ye modification karake... classes ka structure finalize karate hai...
(c) Message (Data Class)
    - isRead: bool  # True if seen by the receiver (No need)


WhatsApp Class
    1. Authentication 
    - Authentication me keval user ko register karana hai... and ye sure karana hai ki only regirsterd user hee... whatsApp System ke message ko call kar paye...

    3. Messaging System (send, edit, delete, get)---> add editn functionality
    - markMessageAsRead(userID, messageID) → bool (No need)
    

    5. Utility
    - getUnreadMessages(userID) → list[Message] --->(No Need)
    - getMostActiveUser() → User --->(No Need)

baaki sab same rakhana... 


bhai, ab requirement and design Analysis phase complete ho gaya hai.... ab implementation phase start karate hai...
implement these requirement using cpp
follow Modular desing: separate file for classes user, contact, message, status, whatsApp (.h and .cpp) and main.cpp
apply solid principle: at least each class must have single responsibity principle
saare files ka code different section me dena directly in chat with little exaplanation...
give me complete code for all files... all methods must be implemented...


bhai, ye jo hamane banaya hai... esame whatApp as a global use ho raha hai for all the user 
mai chahata hoon ki sabhi user ke paas apna apna whatsaApp ho... apna apna contact list ho... 
aur whatsApp ke saare user server par ho...server singleton class hona chahiye....
aur bhai message ki type runtime par system detect karega.... using run time polymorphism....
bhai ab final classes kya hogi... classes ka structure finalize karate hai...

finally ye design ready ho gaya hai...
bhai, status ko bhi runtime par pata karate hai...audio hai ya video

WhatsAppServer (Singleton)
 ├──> Stores all registered users
 ├──> Manages authentication
 ├──> getUserByID(int userID) → User*
  
WhatsAppApp (Each User Has Their Own)
 ├──> Manages local contacts & messages
 ├──> Uses server to find users
   - addContact(userID, contactNumber) → bool
   - getContacts(userID) → list[Contact]
   - sendMessage(senderID, receiverID, messageType, content) → bool
   - editMessage(userID, messageID, newContent) → bool  # (Newly Added)
   - deleteMessage(userID, messageID) → bool
   - getMessages(userID, contactID) → list[Message]
   - postStatus(userID, statusType, content) → bool
   - getStatus(userID) → list[Status]
   - deleteStatus(userID, statusID) → bool
  
User (Data Class)
 ├──> ID, Name, Phone, Email, Status
  
Contact (User's Contact List)
 ├──> ID, Name, Phone, Status

Message
- messageID: int
- senderID: int
- receiverID: int
- timestamp: datetime
  (Abstract Base Class)  [Runtime Polymorphism]
 ├──> TextMessage
 ├──> AudioMessage
 ├──> VideoMessage
  
Status (User's Status Updates)
Attributes:
- statusID: int
- userID: int
- timestamp: datetime
- statusContent: str  # Text content or image path
- expirationTime: datetime  # 24 hours validity
(Abstract Base Class)  [Runtime Polymorphism]
 ├──> TextStatus
 |--> ImageStatus
 ├──> AudioStatus
 ├──> VideoStatus

bhai, ab requirement and design Analysis phase complete ho gaya hai.... ab implementation phase start karate hai...
implement these requirement using cpp
follow Modular desing: separate file for classes user, contact, message, status, whatsAppApp, WhatsAppServer (.h and .cpp) and main.cpp
apply solid principle: at least each class must have single responsibity principle
saare files ka code different section me dena directly in chat with little exaplanation...
give me complete code for all files... all methods must be implemented...



very good bhai, kuch modification karake implementation phase ko finalize karate hai...
1. User ka apna WhatsApp create hote server user ko regiester kar de
2. Modify WhatsAppApp.h file add methods
   - addContact
   - getContacts
   - sendMessage
   - editMessage
   - deleteMessage
   - getMessages
   - postStatus
   - getStatus
   - deleteStatus
3. Implement WhatsAppApp.cpp and validate user(make sure only regirsterd user can access this property)
4. Main.cpp me 
  - at least two user apna whatApp create kare...
  - ek dusare ko contact me add kare
  - ek dusare ko message kare
  = status post kar sake

bhai, WhatsAppApp.h, WhatsAppApp.cpp, Main.cpp file modify karake do directly in chat as different sections


bhai, given code WhatsAppApp.h, WhatsAppApp.cpp and main.cpp me kuch jagah red flag aa raha hai...
jaise
WhatsApp.h me MessageType, StatusType par
WhatsApp.cpp me WhatsAppServer, Contact, MessageType, MessageFactory, getMessageID, getSenderID, editContent, StatusType, StatusFactory, getStatusID

1.bhai maine pahale hee kaha tha message and status ki type runtime par system detect karega.... using run time polymorphism....

2. Implement these files again for your reference I attached
user.h
#ifndef USER_H
#define USER_H

#include <string>

class User {
public:
    int userID;
    std::string name;
    std::string phone;
    std::string email;
    
    User(int id, std::string n, std::string p, std::string e);
};

#endif

contact.h
#ifndef CONTACT_H
#define CONTACT_H

#include <string>

class Contact {
public:
    int contactID;
    std::string name;
    std::string phone;

    Contact(int id, std::string n, std::string p);
};

#endif

message.h
#ifndef MESSAGE_H
#define MESSAGE_H

#include <string>
#include <ctime>

class Message {
public:
    int messageID;
    int senderID;
    int receiverID;
    std::time_t timestamp;
    
    Message(int msgID, int sender, int receiver);
    virtual ~Message() = default;
    virtual std::string getMessageType() = 0;
};

class TextMessage : public Message {
public:
    std::string text;
    TextMessage(int msgID, int sender, int receiver, std::string txt);
    std::string getMessageType() override;
};

class AudioMessage : public Message {
public:
    std::string audioFilePath;
    AudioMessage(int msgID, int sender, int receiver, std::string filePath);
    std::string getMessageType() override;
};

class VideoMessage : public Message {
public:
    std::string videoFilePath;
    VideoMessage(int msgID, int sender, int receiver, std::string filePath);
    std::string getMessageType() override;
};

#endif

status.h
#ifndef STATUS_H
#define STATUS_H

#include <string>
#include <ctime>

class Status {
public:
    int statusID;
    int userID;
    std::time_t timestamp;
    virtual ~Status() = default;
    virtual std::string getStatusType() = 0;
};

class TextStatus : public Status {
public:
    std::string text;
    TextStatus(int id, int user, std::string txt);
    std::string getStatusType() override;
};

class ImageStatus : public Status {
public:
    std::string imagePath;
    ImageStatus(int id, int user, std::string imgPath);
    std::string getStatusType() override;
};

#endif

whatsAppServer.h
#ifndef WHATSAPPSERVER_H
#define WHATSAPPSERVER_H

#include <vector>
#include "User.h"

class WhatsAppServer {
private:
    static WhatsAppServer* instance;
    std::vector<User> users;
    WhatsAppServer() {}

public:
    static WhatsAppServer* getInstance();
    void registerUser(User user);
    User* getUserByID(int userID);
};

#endif
